package bbdd.jdbc1;

import java.sql.*;
import java.util.Scanner;

public class Program {

	private final static String USERNAME = "UO285176";
	private final static String PASSWD = "1234qwerty##";
	private final static String CONNECTION = "jdbc:oracle:thin:@156.35.94.98:1521:desa19";

	public static void main(String[] args) throws SQLException {
		exercise1_1();
		exercise1_2();
		exercise2();
	}

	/*
	 * 1. Crear un metodo en Java que muestre por pantalla los resultados de las
	 * consultas 21 y 32 de la Practica SQL2. 1.1. (21) Obtener el nombre y el
	 * apellido de los clientes que han adquirido un coche en un concesionario de
	 * Madrid, el cual dispone de coches del modelo gti.
	 */
	public static void exercise1_1() throws SQLException {
		DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
		Connection con = DriverManager.getConnection(CONNECTION, USERNAME, PASSWD);
		StringBuilder query = new StringBuilder();
		query.append("SELECT nombre, apellido\r\n" + "FROM clientes\r\n" + "WHERE dni IN (SELECT DISTINCT V.dni\r\n"
				+ "    FROM ventas V, coches CH, concesionarios CO, distribucion D\r\n"
				+ "    WHERE V.cifc=CO.cifc AND CO.ciudadc='madrid' AND CO.cifc=D.cifc\r\n"
				+ "        AND D.codcoche = CH.codcoche AND CH.modelo='gti')");
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery(query.toString());

		// rs show results

		while (rs.next()) {
			System.out.print("Nombre: " + rs.getString(1) + " ");
			System.out.print(", Apellido: " + rs.getString(2));
			System.out.println();
		}

		rs.close();
		st.close();
		con.close();
	}

	/*
	 * 1.2. (32) Obtener un listado de los concesionarios cuyo promedio de coches
	 * supera a la cantidad promedio de todos los concesionarios.
	 */
	public static void exercise1_2() throws SQLException {
		DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
		Connection con = DriverManager.getConnection(CONNECTION, USERNAME, PASSWD);
		StringBuilder query = new StringBuilder();
		query.append("SELECT cifc,nombrec,ciudadc\r\n" + "FROM concesionarios\r\n" + "WHERE cifc IN(\r\n"
				+ "SELECT cifc\r\n" + "FROM distribucion\r\n" + "GROUP BY cifc\r\n"
				+ "HAVING SUM(cantidad)> (SELECT AVG(total) FROM(SELECT SUM(cantidad)total FROM distribucion GROUP BY cifc)))");
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery(query.toString());

		// rs show results

		while (rs.next()) {
			System.out.print("CIFC: " + rs.getString(1) + " ");
			System.out.print(", NOMBREC: " + rs.getString(2) + ", CIUDADC: " + rs.getString(3));
			System.out.println();
		}

		rs.close();
		st.close();
		con.close();
	}

	/*
	 * 2. Crear un metodo en Java que muestre por pantalla el resultado de la
	 * consulta 6 de la Practica SQL2 de forma el color de la busqueda sea
	 * introducido por el usuario. (6) Obtener el nombre de las marcas de las que se
	 * han vendido coches de un color introducido por el usuario.
	 */
	public static void exercise2() throws SQLException {
		DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
		Connection con = DriverManager.getConnection(CONNECTION, USERNAME, PASSWD);
		StringBuilder query = new StringBuilder();
		query.append("SELECT DISTINCT M.nombrem\r\n" + "FROM marcas M, marco R, ventas V\r\n"
				+ "WHERE M.cifm=R.cifm AND R.codcoche=V.codcoche AND V.color='rojo';");
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery(query.toString());

		// rs show results

		while (rs.next()) {
			System.out.print("TOTAL: " + rs.getString(1) + " ");
			System.out.println();
		}

		rs.close();
		st.close();
		con.close();
	}

	/*
	 * 3. Crear un metodo en Java para ejecutar la consulta 27 de la Practica SQL2
	 * de forma que los limites la cantidad de coches sean introducidos por el
	 * usuario. (27) Obtener el cifc de los concesionarios que disponen de una
	 * cantidad de coches comprendida entre dos cantidades introducidas por el
	 * usuario, ambas inclusive.
	 * 
	 */
	public static void exercise3() {

	}

	/*
	 * 4. Crear un metodo en Java para ejecutar la consulta 24 de la Practica SQL2
	 * de forma que tanto la ciudad del concesionario como el color sean
	 * introducidos por el usuario. (24) Obtener los nombres de los clientes que no
	 * han comprado coches de un color introducido por el usuario en concesionarios
	 * de una ciudad introducida por el usuario.
	 * 
	 */
	public static void exercise4() {

	}

	/*
	 * 5. Crear un metodo en Java que haciendo uso de la instruccion SQL adecuada:
	 * 5.1. Introduzca datos en la tabla coches cuyos datos son introducidos por el
	 * usuario.
	 * 
	 */
	public static void exercise5_1() {

	}

	/*
	 * 5.2. Borre un determinado coche cuyo codigo es introducido por el usuario.
	 */
	public static void exercise5_2() {

	}

	/*
	 * 5.3. Actualice el nombre y el modelo para un determinado coche cuyo codigo es
	 * introducido por el usuario.
	 */
	public static void exercise5_3() {

	}

	/*
	 * 6. Invocar la funcion y el procedimiento del ejercicio 10 de la practica PL1
	 * desde una aplicacion Java. (10) Realizar un procedimiento y una funcion que
	 * dado un codigo de concesionario devuelve el numero ventas que se han
	 * realizado en el mismo. 6.1. Funcion
	 */
	public static void exercise6_1() {

	}

	/*
	 * 6.2. Procedimiento
	 */
	public static void exercise6_2() {

	}

	/*
	 * 7. Invocar la funcion y el procedimiento del ejercicio 11 de la Practica PL1
	 * desde una aplicacion Java. (11) Realizar un procedimiento y una funcion que
	 * dada una ciudad que se le pasa como parametro devuelve el numero de clientes
	 * de dicha ciudad. 7.1. Funcion
	 * 
	 */
	public static void exercise7_1() {

	}

	/*
	 * 7.2. Procedimiento
	 */
	public static void exercise7_2() {

	}

	/*
	 * 8. Crear un metodo en Java que imprima por pantalla los coches que han sido
	 * adquiridos por cada cliente. Ademas, debera imprimirse para cada cliente el
	 * numero de coches que ha comprado y el numero de concesionarios en los que ha
	 * comprado. Aquellos clientes que no han adquirido ningun coche no deben
	 * aparecer en el listado.
	 */
	public static void exercise8() {

	}

	@SuppressWarnings("resource")
	private static String ReadString() {
		return new Scanner(System.in).nextLine();
	}

	@SuppressWarnings("resource")
	private static int ReadInt() {
		return new Scanner(System.in).nextInt();
	}
}
